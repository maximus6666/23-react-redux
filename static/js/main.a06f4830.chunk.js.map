{"version":3,"sources":["img/general.jpg","img/kenobi.jpg","img/postImg.jpg","redux/reducers.js","store.js","redux/actions.js","components/PostForm.js","icons/comment.svg","icons/heart.svg","icons/repost.svg","icons/share.svg","icons/verified.svg","icons/down-chevron.svg","components/Post.js","components/PostsList.js","App.js","reportWebVitals.js","index.js"],"names":["date","Date","initialState","posts","postId","authorId","content","image","toLocaleString","likes","comments","reposts","postImg","authors","id","name","photo","nickname","generalImg","kenobiImg","store","createStore","state","action","type","payload","index","findIndex","item","map","i","arr","window","__REDUX_DEVTOOLS_EXTENSION__","addLike","currentPost","PostForm","useState","setAuthorId","postContent","setPostContent","setPostImg","getState","length","setPostId","className","value","onChange","event","target","placeholder","onClick","post","dispatch","console","log","alert","Post","props","author","find","parseInt","isLiked","setIsLiked","isCommented","setIsCommented","isReposted","setIsReposted","src","alt","verifyed","chevron","commentsImg","repostsImg","heart","share","PostsList","useSelector","key","reverse","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a06f4830.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/general.abc5f4ee.jpg\";","export default __webpack_public_path__ + \"static/media/kenobi.7beee588.jpg\";","export default __webpack_public_path__ + \"static/media/postImg.f532d6c4.jpg\";","import generalImg from \"../img/general.jpg\";\r\nimport kenobiImg from \"../img/kenobi.jpg\";\r\nimport postImg from \"../img/postImg.jpg\"\r\n\r\nconst date = new Date();\r\nconst initialState = {\r\n  posts: [\r\n    {\r\n      postId:1,\r\n      authorId: 1,\r\n      content: \"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\r\n      image:\"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\",\r\n      date: date.toLocaleString(),\r\n      likes: 128,\r\n      comments: 10,\r\n      reposts: 51,\r\n    },\r\n    {\r\n      postId:2,\r\n      authorId: 2,\r\n      content: \"Hello there...\",\r\n      image: postImg,\r\n      date: date.toLocaleString(),\r\n      likes: 256,\r\n      comments: 22,\r\n      reposts: 66,\r\n    },\r\n\r\n  ],\r\n  authors:[\r\n    {\r\n      id: 1,\r\n      name: \"Anakin Skywalker\",\r\n      photo: \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\",\r\n      nickname: \"@dart_vader\"\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"General Grievous\",\r\n      photo: generalImg,\r\n      nickname: \"@gen_gr\"\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Obi-Wan Kenobi\",\r\n      photo: kenobiImg,\r\n      nickname: \"@master_K\"\r\n    }\r\n\r\n  ],\r\n}\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_POST\":\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, action.payload]\r\n      }\r\n    case \"ADD_LIKE\":\r\n      const index = state.posts.findIndex((item) => item.postId === action.payload.postId);\r\n      return {\r\n        ...state,\r\n        posts: state.posts.map((item, i, arr) => {\r\n          arr[index].likes = action.payload.likes;\r\n          arr[index].comments = action.payload.comments;\r\n          arr[index].reposts = action.payload.reposts;\r\n\r\n          return item\r\n        })\r\n      }\r\n\r\n    default:return state;\r\n  }\r\n}\r\n","import { createStore } from 'redux';\r\nimport {reducer} from \"./redux/reducers\"\r\n\r\n\r\nconst store = createStore(\r\n\treducer,\r\n\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n\r\n);\r\n\r\nexport default store;\r\n","export const addPost = (post) => {\r\n\treturn {\r\n\t\t\ttype: \"ADD_POST\",\r\n\t\t\tpayload:{...post},\r\n\t}\r\n}\r\n\r\nexport const addLike = (currentPost) => {\r\n\treturn {\r\n\t\ttype: \"ADD_LIKE\",\r\n\t\tpayload: currentPost,\r\n\t}\r\n}\r\n","import { React, useState } from 'react';\r\nimport store from '../store';\r\nimport { addPost } from \"../redux/actions\";\r\n\r\nconst PostForm = () => {\r\n\tconst [authorId, setAuthorId] = useState(1);\r\n\tconst [postContent, setPostContent] = useState(\"\");\r\n\tconst [postImg, setPostImg] = useState(\"\");\r\n\tconst [postId, setPostId] = useState(store.getState().posts.length + 1);\r\n\r\n  const addPostHandle = () => {\r\n\t\tif (!postContent || !postImg) {\r\n\t\t\tconsole.log();\r\n\t\t\talert ('Please fill the form')\r\n\t\t} else {\r\n\t\t\tstore.dispatch(addPost(\r\n\t\t\t\t{\r\n\t\t\t\t\tpostId: postId,\r\n\t\t\t\t\tauthorId: authorId,\r\n\t\t\t\t\tcontent: postContent,\r\n\t\t\t\t\timage: postImg,\r\n\t\t\t\t\tdate: new Date().toLocaleString(),\r\n\t\t\t\t\tlikes: 0,\r\n\t\t\t\t\tcomments: 0,\r\n\t\t\t\t\treposts: 0,\r\n\t\t\t\t}\r\n\t\t\t));\r\n\t\t\tsetPostId(postId + 1);\r\n\t\t\tsetPostContent(\"\");\r\n\t\t\tsetPostImg(\"\");\r\n\t\t}\r\n    \r\n  }\r\n\r\n\treturn(\r\n\t\t<div className=\"add-post-form\">\r\n\t\t\t<select value={authorId} onChange={(event) => setAuthorId(event.target.value)}>\r\n\t\t\t\t<option value={1}>Anakin</option>\r\n\t\t\t\t<option value={2}>Kenobi</option>\r\n\t\t\t\t<option value={3}>Grievous</option>\r\n\t\t\t</select>\r\n\t\t\t<input value={postContent} \r\n\t\t\t\t\t\t onChange={(event) => setPostContent(event.target.value)}\r\n\t\t\t\t\t\t type=\"text\"\r\n             placeholder=\"Enter post text\"\r\n      >\r\n\t\t\t</input>\r\n\t\t\t<input value={postImg} \r\n\t\t\t\t\t\t onChange={(event) => setPostImg(event.target.value)} \r\n\t\t\t\t\t\t type=\"text\"\r\n             placeholder=\"Enter post image src\"\r\n      >\r\n\t\t\t</input>\r\n\t\t\t<button \r\n        className=\"add-post-btn\"\r\n        onClick={addPostHandle}\r\n\t\t\t>Add Post\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default PostForm;\r\n","export default __webpack_public_path__ + \"static/media/comment.dad8eb65.svg\";","export default __webpack_public_path__ + \"static/media/heart.0bbdf847.svg\";","export default __webpack_public_path__ + \"static/media/repost.9472069f.svg\";","export default __webpack_public_path__ + \"static/media/share.83c76f3e.svg\";","export default __webpack_public_path__ + \"static/media/verified.fd71834f.svg\";","export default __webpack_public_path__ + \"static/media/down-chevron.8bf5daa8.svg\";","import React, { useState } from 'react';\r\nimport \"../styles.css\";\r\nimport commentsImg from \"../icons/comment.svg\";\r\nimport heart from \"../icons/heart.svg\";\r\nimport repostsImg from \"../icons/repost.svg\";\r\nimport share from \"../icons/share.svg\";\r\nimport verifyed from \"../icons/verified.svg\";\r\nimport chevron from \"../icons/down-chevron.svg\";\r\nimport store from '../store';\r\nimport { addLike } from '../redux/actions';\r\n\r\nconst Post = ( props ) => {\r\n  const state = store.getState();\r\n  const {authorId, date, content, image, likes, comments, reposts, postId } = props;\r\n  const author = state.authors.find(item => item.id === parseInt(authorId));\r\n\r\n  const [isLiked, setIsLiked] = useState(false);\r\n  const [isCommented, setIsCommented] = useState(false);\r\n  const [isReposted, setIsReposted] = useState(false);\r\n\r\n  const likeHandle = () => {\r\n    const currentPost = state.posts.find((item) => item.postId === parseInt(postId));\r\n    store.dispatch(addLike(\r\n      {\r\n        ...currentPost,\r\n        likes: isLiked ? likes - 1 : likes + 1,\r\n      }\r\n    ));\r\n    setIsLiked(!isLiked)\r\n  }\r\n  \r\n  const commentsHandle = () => {\r\n    const currentPost = state.posts.find((item) => item.postId === parseInt(postId));\r\n    store.dispatch(addLike(\r\n      {\r\n        ...currentPost,\r\n        comments: isCommented ? comments - 1 : comments + 1,\r\n      }\r\n    ));\r\n    setIsCommented(!isCommented)\r\n  }\r\n\r\n  const repostsHandle = () => {\r\n    const currentPost = state.posts.find((item) => item.postId === parseInt(postId));\r\n    store.dispatch(addLike(\r\n      {\r\n        ...currentPost,\r\n        reposts: isReposted ? reposts - 1 : reposts + 1,\r\n      }\r\n    ));\r\n    setIsReposted(!isReposted)\r\n  }\r\n\r\n\treturn (\r\n    <div className=\"post\">\r\n      <div className=\"author-panel\">\r\n        <div className=\"author-info-block\">\r\n          <img src={author.photo} className=\"author-photo\" alt='author'/>\r\n          <div className=\"text-wrapper\">\r\n            <div className=\"post-info\">\r\n              <span className=\"author-name\">{author.name}</span>\r\n              <img src={verifyed} alt=\"verifyed\"/>\r\n              <span className=\"author-nickname\">{author.nickname}</span>\r\n              <span className=\"post-date\">{date}</span>\r\n            </div>\r\n            <span className=\"post-content\">{content}</span>\r\n          </div>\r\n        </div>\r\n        <img className=\"chevron\" src={chevron} alt=\"arow\"/>\r\n      </div>\r\n      <div className=\"post-img-block\">\r\n        <img className=\"post-img\" src={image} alt=\"post-img\"/>\r\n        <div className=\"icons-block\">\r\n          <div >\r\n            <div onClick={commentsHandle} className=\"comments\">\r\n              <img src={commentsImg} alt=\"coments\"/>\r\n              <span>{comments}</span>\r\n            </div>\r\n          </div>\r\n          <div >\r\n            <div onClick={repostsHandle} className=\"reposts\">\r\n              <img src={repostsImg} alt=\"reposts\"/>\r\n              <span>{reposts}</span>\r\n            </div>\r\n          </div>\t\t\t\t\r\n          <div  >\r\n            <div onClick={likeHandle} className=\"heart\">\r\n              <img src={heart} alt=\"heart\"/>\r\n              <span>{likes}</span>\r\n            </div>\r\n          </div>\t\t\t\r\n          <div className=\"share\">\r\n            <img src={share} alt=\"share\"/>\r\n          </div>\t\t\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;\r\n","import Post from \"./Post.js\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst PostsList = ( ) => {\r\n\tconst posts = useSelector(state => state.posts);\r\n\treturn (\r\n\t\t(posts.map(((item, index) => <Post {...item} key={index}/>))).reverse()\r\n\t)\r\n}\r\n\r\nexport default PostsList;\r\n","import './App.css';\r\nimport PostForm from './components/PostForm';\r\nimport PostsList from './components/PostsList';\r\n\r\nconst App = () => (\r\n    <div className=\"night-mode\">\r\n      <PostForm></PostForm>\r\n      <PostsList/>\r\n    </div>\r\n  );\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './store'\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}